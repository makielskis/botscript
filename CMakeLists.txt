cmake_minimum_required(VERSION 2.6)
project(botscript)


################################
# Dependencies
################################
if (NOT TARGET lua)
  add_subdirectory(external_lib/lua-5.2)
endif()
add_subdirectory(external_lib/pugixml-1.2/scripts)
add_subdirectory(external_lib/tidy)


################################
# Boost
################################
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost COMPONENTS
  system
  thread
  filesystem
  regex
  iostreams
REQUIRED)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIR})
else(Boost_FOUND)
  message("No Boost found.")
endif(Boost_FOUND)
link_directories(${CMAKE_LIBRARY_PATH})


################################
# Include Paths
################################
include_directories("external_lib/lua-5.2/src")
include_directories("external_lib/rapidjson/include")
include_directories("external_lib/tidy/include")
include_directories("external_lib/pugixml-1.2/src")
include_directories("./src")


################################
# Static library
################################
file(GLOB exe_files "src/main.cc")
file(GLOB_RECURSE bs_files "src/*.cc")
list(REMOVE_ITEM  bs_files ${exe_files})
add_library(bs STATIC EXCLUDE_FROM_ALL ${bs_files})
if(MSVC)
  target_link_libraries(bs ${Boost_LIBRARIES} tidy pugixml lua)
  set(_def
    _VARIADIC_MAX=10
    _WIN32_WINNT=0x0501
  )
  set_target_properties(bs PROPERTIES COMPILE_DEFINITIONS "${_def}")
elseif(MINGW)
  target_link_libraries(bs -Wl,-Bstatic z ${Boost_LIBRARIES} tidy pugixml lua ws2_32 mswsock)
  set_target_properties(bs PROPERTIES COMPILE_FLAGS "-std=c++11 -s")
  set(_def
    BOOST_THREAD_USE_LIB
    WINVER=0x0501
    _WIN32_WINNT=0x0501
    _WIN32_IE=0x0501
  )
  set_target_properties(bs PROPERTIES COMPILE_DEFINITIONS "${_def}")
elseif(ANDROID)
  target_link_libraries(bs ${Boost_LIBRARIES} tidy pugixml lua z dl -pthread)
  set_target_properties(bs PROPERTIES COMPILE_FLAGS "-std=c++11 -fPIC")
  set(_def ANDROID)
  set_target_properties(bs PROPERTIES COMPILE_DEFINITIONS "${_def}")
else()
  set_target_properties(bs PROPERTIES COMPILE_FLAGS "-Wall -Wextra -std=c++11")
  if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    target_link_libraries(bs ${Boost_LIBRARIES} tidy pugixml lua z)
  else()
    target_link_libraries(bs ${Boost_LIBRARIES} tidy pugixml lua z dl -pthread)
  endif()
endif()


################################
# Main executable (currently not supported)
################################
#add_executable(botscript ${exe_files})
#if(MSVC)
#  target_link_libraries(botscript bs ${Boost_LIBRARIES} tidy pugixml lua)
#elseif(MINGW)
#  target_link_libraries(botscript -Wl,-Bstatic ${Boost_LIBRARIES} tidy pugixml lua z ws2_32 mswsock)
#else()
#  target_link_libraries(botscript bs ${Boost_LIBRARIES} tidy pugixml lua z dl -pthread)
#endif()


################################
# Unit Tests
################################
add_subdirectory(test/gtest-1.7.0)
enable_testing()
include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})

add_executable(botscript-tests EXCLUDE_FROM_ALL test/config_test.cpp)
set_target_properties(botscript-tests PROPERTIES COMPILE_FLAGS "-std=c++11")

target_link_libraries(botscript-tests gtest gtest_main bs ${Boost_LIBRARIES} tidy pugixml lua z dl -pthread)
add_test(botscript-tests botscript-tests)
